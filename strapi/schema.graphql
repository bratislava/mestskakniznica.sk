### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BasicDocument {
  attachment: UploadFileEntityResponse
  author: String
  createdAt: DateTime
  date_added: Date
  description: String
  file_category: FileCategoryEntityResponse
  link: String
  metadata: [BasicDocumentMetadataDynamicZone]
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type BasicDocumentEntity {
  attributes: BasicDocument
  id: ID
}

type BasicDocumentEntityResponse {
  data: BasicDocumentEntity
}

type BasicDocumentEntityResponseCollection {
  data: [BasicDocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input BasicDocumentFiltersInput {
  and: [BasicDocumentFiltersInput]
  author: StringFilterInput
  createdAt: DateTimeFilterInput
  date_added: DateFilterInput
  description: StringFilterInput
  file_category: FileCategoryFiltersInput
  id: IDFilterInput
  link: StringFilterInput
  not: BasicDocumentFiltersInput
  or: [BasicDocumentFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BasicDocumentInput {
  attachment: ID
  author: String
  date_added: Date
  description: String
  file_category: ID
  link: String
  metadata: [BasicDocumentMetadataDynamicZoneInput!]
  publishedAt: DateTime
  slug: String
  title: String
}

union BasicDocumentMetadataDynamicZone = ComponentMetadataFaktury | ComponentMetadataMetadata | ComponentMetadataObchodnaVerejnaSutaz | ComponentMetadataObjednavky | ComponentMetadataVerejneObstaravanie | ComponentMetadataZmluvy | Error

scalar BasicDocumentMetadataDynamicZoneInput

type BasicDocumentRelationResponseCollection {
  data: [BasicDocumentEntity!]!
}

type BlogPost {
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  locale: String
  localizations(filters: BlogPostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogPostRelationResponseCollection
  publishedAt: DateTime
  sections: [BlogPostSectionsDynamicZone]
  seo: ComponentCommonSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type BlogPostEntity {
  attributes: BlogPost
  id: ID
}

type BlogPostEntityResponse {
  data: BlogPostEntity
}

type BlogPostEntityResponseCollection {
  data: [BlogPostEntity!]!
  meta: ResponseCollectionMeta!
}

input BlogPostFiltersInput {
  and: [BlogPostFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: BlogPostFiltersInput
  not: BlogPostFiltersInput
  or: [BlogPostFiltersInput]
  publishedAt: DateTimeFilterInput
  seo: ComponentCommonSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogPostInput {
  coverMedia: ID
  publishedAt: DateTime
  sections: [BlogPostSectionsDynamicZoneInput!]
  seo: ComponentCommonSeoInput
  slug: String
  title: String
}

type BlogPostRelationResponseCollection {
  data: [BlogPostEntity!]!
}

union BlogPostSectionsDynamicZone = ComponentSectionsAccordion | ComponentSectionsCta | ComponentSectionsDivider | ComponentSectionsDocuments | ComponentSectionsFaq | ComponentSectionsFlatText | ComponentSectionsGallery | ComponentSectionsSiteUsefullness | ComponentSectionsTable | ComponentSectionsVideo | Error

scalar BlogPostSectionsDynamicZoneInput

type BookTag {
  createdAt: DateTime
  displayName: String
  publishedAt: DateTime
  slug: String
  updatedAt: DateTime
}

type BookTagEntity {
  attributes: BookTag
  id: ID
}

type BookTagEntityResponse {
  data: BookTagEntity
}

type BookTagEntityResponseCollection {
  data: [BookTagEntity!]!
  meta: ResponseCollectionMeta!
}

input BookTagFiltersInput {
  and: [BookTagFiltersInput]
  createdAt: DateTimeFilterInput
  displayName: StringFilterInput
  id: IDFilterInput
  not: BookTagFiltersInput
  or: [BookTagFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BookTagInput {
  displayName: String
  publishedAt: DateTime
  slug: String
}

type BookTagRelationResponseCollection {
  data: [BookTagEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Branch {
  address: String
  barrierFreeInfo: String
  barrierFreeState: ENUM_BRANCH_BARRIERFREESTATE
  body: String
  createdAt: DateTime
  email: String
  events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventRelationResponseCollection
  latitude: Float
  listingImage: UploadFileEntityResponse
  locale: String
  localizations(filters: BranchFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BranchRelationResponseCollection
  longitude: Float
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  openingHours: ComponentBlocksOpeningHours
  phone: String
  publicTransportInfo: String
  seo: ComponentCommonSeo
  servicePages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  slug: String!
  subBranches(filters: BranchFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BranchRelationResponseCollection
  title: String!
  updatedAt: DateTime
}

type BranchEntity {
  attributes: Branch
  id: ID
}

type BranchEntityResponse {
  data: BranchEntity
}

type BranchEntityResponseCollection {
  data: [BranchEntity!]!
  meta: ResponseCollectionMeta!
}

input BranchFiltersInput {
  address: StringFilterInput
  and: [BranchFiltersInput]
  barrierFreeInfo: StringFilterInput
  barrierFreeState: StringFilterInput
  body: StringFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  events: EventFiltersInput
  id: IDFilterInput
  latitude: FloatFilterInput
  locale: StringFilterInput
  localizations: BranchFiltersInput
  longitude: FloatFilterInput
  not: BranchFiltersInput
  openingHours: ComponentBlocksOpeningHoursFiltersInput
  or: [BranchFiltersInput]
  phone: StringFilterInput
  publicTransportInfo: StringFilterInput
  seo: ComponentCommonSeoFiltersInput
  servicePages: PageFiltersInput
  slug: StringFilterInput
  subBranches: BranchFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BranchInput {
  address: String
  barrierFreeInfo: String
  barrierFreeState: ENUM_BRANCH_BARRIERFREESTATE
  body: String
  email: String
  events: [ID]
  latitude: Float
  listingImage: ID
  longitude: Float
  medias: [ID]
  openingHours: ComponentBlocksOpeningHoursInput
  phone: String
  publicTransportInfo: String
  seo: ComponentCommonSeoInput
  servicePages: [ID]
  slug: String
  subBranches: [ID]
  title: String
}

type BranchRelationResponseCollection {
  data: [BranchEntity!]!
}

type ComponentAccordionItemsFlatText {
  category: String
  content: String
  id: ID!
}

input ComponentAccordionItemsFlatTextFiltersInput {
  and: [ComponentAccordionItemsFlatTextFiltersInput]
  category: StringFilterInput
  content: StringFilterInput
  not: ComponentAccordionItemsFlatTextFiltersInput
  or: [ComponentAccordionItemsFlatTextFiltersInput]
}

input ComponentAccordionItemsFlatTextInput {
  category: String
  content: String
  id: ID
}

type ComponentAccordionItemsForm {
  category: String
  id: ID!
  type: ENUM_COMPONENTACCORDIONITEMSFORM_TYPE
}

input ComponentAccordionItemsFormFiltersInput {
  and: [ComponentAccordionItemsFormFiltersInput]
  category: StringFilterInput
  not: ComponentAccordionItemsFormFiltersInput
  or: [ComponentAccordionItemsFormFiltersInput]
  type: StringFilterInput
}

input ComponentAccordionItemsFormInput {
  category: String
  id: ID
  type: ENUM_COMPONENTACCORDIONITEMSFORM_TYPE
}

type ComponentAccordionItemsTableRow {
  accordionCategory: String
  id: ID!
  label: String
  tableCategory: String
  value: String
  valueAlign: ENUM_COMPONENTACCORDIONITEMSTABLEROW_VALUEALIGN
}

input ComponentAccordionItemsTableRowFiltersInput {
  accordionCategory: StringFilterInput
  and: [ComponentAccordionItemsTableRowFiltersInput]
  label: StringFilterInput
  not: ComponentAccordionItemsTableRowFiltersInput
  or: [ComponentAccordionItemsTableRowFiltersInput]
  tableCategory: StringFilterInput
  value: StringFilterInput
  valueAlign: StringFilterInput
}

input ComponentAccordionItemsTableRowInput {
  accordionCategory: String
  id: ID
  label: String
  tableCategory: String
  value: String
  valueAlign: ENUM_COMPONENTACCORDIONITEMSTABLEROW_VALUEALIGN
}

type ComponentAddressAddress {
  id: ID!
  navigateTo: String
  title: String
}

input ComponentAddressAddressFiltersInput {
  and: [ComponentAddressAddressFiltersInput]
  navigateTo: StringFilterInput
  not: ComponentAddressAddressFiltersInput
  or: [ComponentAddressAddressFiltersInput]
  title: StringFilterInput
}

input ComponentAddressAddressInput {
  id: ID
  navigateTo: String
  title: String
}

type ComponentBlocksAccordionItem {
  content: String
  id: ID!
  label: String
}

input ComponentBlocksAccordionItemFiltersInput {
  and: [ComponentBlocksAccordionItemFiltersInput]
  content: StringFilterInput
  label: StringFilterInput
  not: ComponentBlocksAccordionItemFiltersInput
  or: [ComponentBlocksAccordionItemFiltersInput]
}

input ComponentBlocksAccordionItemInput {
  content: String
  id: ID
  label: String
}

type ComponentBlocksBranchItem {
  branch: BranchEntityResponse
  id: ID!
}

input ComponentBlocksBranchItemFiltersInput {
  and: [ComponentBlocksBranchItemFiltersInput]
  branch: BranchFiltersInput
  not: ComponentBlocksBranchItemFiltersInput
  or: [ComponentBlocksBranchItemFiltersInput]
}

input ComponentBlocksBranchItemInput {
  branch: ID
  id: ID
}

type ComponentBlocksBranchItemWithPage {
  branch: BranchEntityResponse
  id: ID!
  page: PageEntityResponse
}

input ComponentBlocksBranchItemWithPageFiltersInput {
  and: [ComponentBlocksBranchItemWithPageFiltersInput]
  branch: BranchFiltersInput
  not: ComponentBlocksBranchItemWithPageFiltersInput
  or: [ComponentBlocksBranchItemWithPageFiltersInput]
  page: PageFiltersInput
}

input ComponentBlocksBranchItemWithPageInput {
  branch: ID
  id: ID
  page: ID
}

type ComponentBlocksFileItem {
  attachment: UploadFileEntityResponse!
  id: ID!
  name: String
}

input ComponentBlocksFileItemFiltersInput {
  and: [ComponentBlocksFileItemFiltersInput]
  name: StringFilterInput
  not: ComponentBlocksFileItemFiltersInput
  or: [ComponentBlocksFileItemFiltersInput]
}

input ComponentBlocksFileItemInput {
  attachment: ID
  id: ID
  name: String
}

type ComponentBlocksNoticeFiles {
  files(filters: ComponentBlocksFileItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksFileItem]
  id: ID!
  title: String
}

input ComponentBlocksNoticeFilesFiltersInput {
  and: [ComponentBlocksNoticeFilesFiltersInput]
  files: ComponentBlocksFileItemFiltersInput
  not: ComponentBlocksNoticeFilesFiltersInput
  or: [ComponentBlocksNoticeFilesFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksNoticeFilesInput {
  files: [ComponentBlocksFileItemInput]
  id: ID
  title: String
}

type ComponentBlocksOpeningHours {
  days(filters: ComponentBlocksOpeningHoursItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksOpeningHoursItem]!
  id: ID!
}

input ComponentBlocksOpeningHoursFiltersInput {
  and: [ComponentBlocksOpeningHoursFiltersInput]
  days: ComponentBlocksOpeningHoursItemFiltersInput
  not: ComponentBlocksOpeningHoursFiltersInput
  or: [ComponentBlocksOpeningHoursFiltersInput]
}

input ComponentBlocksOpeningHoursInput {
  days: [ComponentBlocksOpeningHoursItemInput]
  id: ID
}

type ComponentBlocksOpeningHoursItem {
  id: ID!
  label: String
  time: String!
}

input ComponentBlocksOpeningHoursItemFiltersInput {
  and: [ComponentBlocksOpeningHoursItemFiltersInput]
  label: StringFilterInput
  not: ComponentBlocksOpeningHoursItemFiltersInput
  or: [ComponentBlocksOpeningHoursItemFiltersInput]
  time: StringFilterInput
}

input ComponentBlocksOpeningHoursItemInput {
  id: ID
  label: String
  time: String
}

type ComponentBlocksPageLink {
  id: ID!
  page: PageEntityResponse
  title: String
  url: String
}

input ComponentBlocksPageLinkFiltersInput {
  and: [ComponentBlocksPageLinkFiltersInput]
  not: ComponentBlocksPageLinkFiltersInput
  or: [ComponentBlocksPageLinkFiltersInput]
  page: PageFiltersInput
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentBlocksPageLinkInput {
  id: ID
  page: ID
  title: String
  url: String
}

type ComponentBlocksSubpage {
  description: String
  id: ID!
  page: PageEntityResponse
  title: String
  url: String
}

input ComponentBlocksSubpageFiltersInput {
  and: [ComponentBlocksSubpageFiltersInput]
  description: StringFilterInput
  not: ComponentBlocksSubpageFiltersInput
  or: [ComponentBlocksSubpageFiltersInput]
  page: PageFiltersInput
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentBlocksSubpageInput {
  description: String
  id: ID
  page: ID
  title: String
  url: String
}

type ComponentBlocksTableRow {
  id: ID!
  label: String
  value: String
  valueAlign: ENUM_COMPONENTBLOCKSTABLEROW_VALUEALIGN
}

input ComponentBlocksTableRowFiltersInput {
  and: [ComponentBlocksTableRowFiltersInput]
  label: StringFilterInput
  not: ComponentBlocksTableRowFiltersInput
  or: [ComponentBlocksTableRowFiltersInput]
  value: StringFilterInput
  valueAlign: StringFilterInput
}

input ComponentBlocksTableRowInput {
  id: ID
  label: String
  value: String
  valueAlign: ENUM_COMPONENTBLOCKSTABLEROW_VALUEALIGN
}

type ComponentCommonSeo {
  id: ID!
  keywords: String
  metaDescription: String
  metaTitle: String
}

input ComponentCommonSeoFiltersInput {
  and: [ComponentCommonSeoFiltersInput]
  keywords: StringFilterInput
  metaDescription: StringFilterInput
  metaTitle: StringFilterInput
  not: ComponentCommonSeoFiltersInput
  or: [ComponentCommonSeoFiltersInput]
}

input ComponentCommonSeoInput {
  id: ID
  keywords: String
  metaDescription: String
  metaTitle: String
}

type ComponentFooterFooterColumn {
  footerLink(filters: ComponentFooterFooterLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentFooterFooterLink]
  id: ID!
  title: String
}

input ComponentFooterFooterColumnFiltersInput {
  and: [ComponentFooterFooterColumnFiltersInput]
  footerLink: ComponentFooterFooterLinkFiltersInput
  not: ComponentFooterFooterColumnFiltersInput
  or: [ComponentFooterFooterColumnFiltersInput]
  title: StringFilterInput
}

input ComponentFooterFooterColumnInput {
  footerLink: [ComponentFooterFooterLinkInput]
  id: ID
  title: String
}

type ComponentFooterFooterLink {
  id: ID!
  otherSite: String
  redirectTo: PageEntityResponse
  title: String
}

input ComponentFooterFooterLinkFiltersInput {
  and: [ComponentFooterFooterLinkFiltersInput]
  not: ComponentFooterFooterLinkFiltersInput
  or: [ComponentFooterFooterLinkFiltersInput]
  otherSite: StringFilterInput
  redirectTo: PageFiltersInput
  title: StringFilterInput
}

input ComponentFooterFooterLinkInput {
  id: ID
  otherSite: String
  redirectTo: ID
  title: String
}

type ComponentGuestsGuest {
  avatar: UploadFileEntityResponse
  id: ID!
  name: String
  surname: String
}

input ComponentGuestsGuestFiltersInput {
  and: [ComponentGuestsGuestFiltersInput]
  name: StringFilterInput
  not: ComponentGuestsGuestFiltersInput
  or: [ComponentGuestsGuestFiltersInput]
  surname: StringFilterInput
}

input ComponentGuestsGuestInput {
  avatar: ID
  id: ID
  name: String
  surname: String
}

type ComponentHomepageBenefits {
  benefit: String
  id: ID!
}

input ComponentHomepageBenefitsFiltersInput {
  and: [ComponentHomepageBenefitsFiltersInput]
  benefit: StringFilterInput
  not: ComponentHomepageBenefitsFiltersInput
  or: [ComponentHomepageBenefitsFiltersInput]
}

input ComponentHomepageBenefitsInput {
  benefit: String
  id: ID
}

type ComponentHomepageCta {
  ctaRedirectTo: PageEntityResponse
  id: ID!
  title: String
}

input ComponentHomepageCtaFiltersInput {
  and: [ComponentHomepageCtaFiltersInput]
  ctaRedirectTo: PageFiltersInput
  not: ComponentHomepageCtaFiltersInput
  or: [ComponentHomepageCtaFiltersInput]
  title: StringFilterInput
}

input ComponentHomepageCtaInput {
  ctaRedirectTo: ID
  id: ID
  title: String
}

type ComponentHomepageFaqSection {
  ctas(filters: ComponentHomepageCtaFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomepageCta]
  faqs(filters: ComponentHomepageFaqsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomepageFaqs]
  id: ID!
  redirectTo: PageEntityResponse
  title: String
}

input ComponentHomepageFaqSectionFiltersInput {
  and: [ComponentHomepageFaqSectionFiltersInput]
  ctas: ComponentHomepageCtaFiltersInput
  faqs: ComponentHomepageFaqsFiltersInput
  not: ComponentHomepageFaqSectionFiltersInput
  or: [ComponentHomepageFaqSectionFiltersInput]
  redirectTo: PageFiltersInput
  title: StringFilterInput
}

input ComponentHomepageFaqSectionInput {
  ctas: [ComponentHomepageCtaInput]
  faqs: [ComponentHomepageFaqsInput]
  id: ID
  redirectTo: ID
  title: String
}

type ComponentHomepageFaqs {
  answer: String
  id: ID!
  question: String
}

input ComponentHomepageFaqsFiltersInput {
  and: [ComponentHomepageFaqsFiltersInput]
  answer: StringFilterInput
  not: ComponentHomepageFaqsFiltersInput
  or: [ComponentHomepageFaqsFiltersInput]
  question: StringFilterInput
}

input ComponentHomepageFaqsInput {
  answer: String
  id: ID
  question: String
}

type ComponentHomepageNewsSection {
  id: ID!
  redirectTo: PageEntityResponse
  title: String
}

input ComponentHomepageNewsSectionFiltersInput {
  and: [ComponentHomepageNewsSectionFiltersInput]
  not: ComponentHomepageNewsSectionFiltersInput
  or: [ComponentHomepageNewsSectionFiltersInput]
  redirectTo: PageFiltersInput
  title: StringFilterInput
}

input ComponentHomepageNewsSectionInput {
  id: ID
  redirectTo: ID
  title: String
}

type ComponentHomepagePromotedContent {
  events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventRelationResponseCollection
  id: ID!
  notices(filters: NoticeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NoticeRelationResponseCollection
}

input ComponentHomepagePromotedContentFiltersInput {
  and: [ComponentHomepagePromotedContentFiltersInput]
  events: EventFiltersInput
  not: ComponentHomepagePromotedContentFiltersInput
  notices: NoticeFiltersInput
  or: [ComponentHomepagePromotedContentFiltersInput]
}

input ComponentHomepagePromotedContentInput {
  events: [ID]
  id: ID
  notices: [ID]
}

type ComponentHomepageRegistrationInfo {
  description: String
  id: ID!
  redirectTo: PageEntityResponse
  registrationBenefits(filters: ComponentHomepageBenefitsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHomepageBenefits]
  title: String
}

input ComponentHomepageRegistrationInfoFiltersInput {
  and: [ComponentHomepageRegistrationInfoFiltersInput]
  description: StringFilterInput
  not: ComponentHomepageRegistrationInfoFiltersInput
  or: [ComponentHomepageRegistrationInfoFiltersInput]
  redirectTo: PageFiltersInput
  registrationBenefits: ComponentHomepageBenefitsFiltersInput
  title: StringFilterInput
}

input ComponentHomepageRegistrationInfoInput {
  description: String
  id: ID
  redirectTo: ID
  registrationBenefits: [ComponentHomepageBenefitsInput]
  title: String
}

type ComponentLocalityPartsGalleryParts {
  Description: String
  Photo: UploadFileEntityResponse
  id: ID!
}

input ComponentLocalityPartsGalleryPartsFiltersInput {
  Description: StringFilterInput
  and: [ComponentLocalityPartsGalleryPartsFiltersInput]
  not: ComponentLocalityPartsGalleryPartsFiltersInput
  or: [ComponentLocalityPartsGalleryPartsFiltersInput]
}

input ComponentLocalityPartsGalleryPartsInput {
  Description: String
  Photo: ID
  id: ID
}

type ComponentMenuSectionLinks {
  id: ID!
  sectionLinkBranch: BranchEntityResponse
  sectionLinkPage: PageEntityResponse
  sectionLinkTitle: String
}

input ComponentMenuSectionLinksFiltersInput {
  and: [ComponentMenuSectionLinksFiltersInput]
  not: ComponentMenuSectionLinksFiltersInput
  or: [ComponentMenuSectionLinksFiltersInput]
  sectionLinkBranch: BranchFiltersInput
  sectionLinkPage: PageFiltersInput
  sectionLinkTitle: StringFilterInput
}

input ComponentMenuSectionLinksInput {
  id: ID
  sectionLinkBranch: ID
  sectionLinkPage: ID
  sectionLinkTitle: String
}

type ComponentMenuSections {
  id: ID!
  sectionColumnSpan: Int
  sectionLinks(filters: ComponentMenuSectionLinksFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuSectionLinks]
  sectionPage: PageEntityResponse
  sectionTitle: String
}

input ComponentMenuSectionsFiltersInput {
  and: [ComponentMenuSectionsFiltersInput]
  not: ComponentMenuSectionsFiltersInput
  or: [ComponentMenuSectionsFiltersInput]
  sectionColumnSpan: IntFilterInput
  sectionLinks: ComponentMenuSectionLinksFiltersInput
  sectionPage: PageFiltersInput
  sectionTitle: StringFilterInput
}

input ComponentMenuSectionsInput {
  id: ID
  sectionColumnSpan: Int
  sectionLinks: [ComponentMenuSectionLinksInput]
  sectionPage: ID
  sectionTitle: String
}

type ComponentMenuSubsection {
  columnSpan: Int
  id: ID!
  subsectionLinks(filters: ComponentMenuSubsectionLinksFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuSubsectionLinks]
  subsectionTitle: String
}

input ComponentMenuSubsectionFiltersInput {
  and: [ComponentMenuSubsectionFiltersInput]
  columnSpan: IntFilterInput
  not: ComponentMenuSubsectionFiltersInput
  or: [ComponentMenuSubsectionFiltersInput]
  subsectionLinks: ComponentMenuSubsectionLinksFiltersInput
  subsectionTitle: StringFilterInput
}

input ComponentMenuSubsectionInput {
  columnSpan: Int
  id: ID
  subsectionLinks: [ComponentMenuSubsectionLinksInput]
  subsectionTitle: String
}

type ComponentMenuSubsectionLinks {
  id: ID!
  page: PageEntityResponse
  subsectionLinkTitle: String
}

input ComponentMenuSubsectionLinksFiltersInput {
  and: [ComponentMenuSubsectionLinksFiltersInput]
  not: ComponentMenuSubsectionLinksFiltersInput
  or: [ComponentMenuSubsectionLinksFiltersInput]
  page: PageFiltersInput
  subsectionLinkTitle: StringFilterInput
}

input ComponentMenuSubsectionLinksInput {
  id: ID
  page: ID
  subsectionLinkTitle: String
}

type ComponentMetadataFaktury {
  attachment: UploadFileEntityResponse
  date: Date
  id: ID!
  name: String
}

input ComponentMetadataFakturyFiltersInput {
  and: [ComponentMetadataFakturyFiltersInput]
  date: DateFilterInput
  name: StringFilterInput
  not: ComponentMetadataFakturyFiltersInput
  or: [ComponentMetadataFakturyFiltersInput]
}

input ComponentMetadataFakturyInput {
  attachment: ID
  date: Date
  id: ID
  name: String
}

type ComponentMetadataMetadata {
  amount: String
  description: String
  grant_name: String
  grant_number: String
  id: ID!
  provider: String
  year: Int
}

input ComponentMetadataMetadataFiltersInput {
  amount: StringFilterInput
  and: [ComponentMetadataMetadataFiltersInput]
  description: StringFilterInput
  grant_name: StringFilterInput
  grant_number: StringFilterInput
  not: ComponentMetadataMetadataFiltersInput
  or: [ComponentMetadataMetadataFiltersInput]
  provider: StringFilterInput
  year: IntFilterInput
}

input ComponentMetadataMetadataInput {
  amount: String
  description: String
  grant_name: String
  grant_number: String
  id: ID
  provider: String
  year: Int
}

type ComponentMetadataObchodnaVerejnaSutaz {
  amount: String
  attachment: UploadFileEntityResponse
  date_added: Date
  description: String
  id: ID!
  number: String
  subject: String
}

input ComponentMetadataObchodnaVerejnaSutazFiltersInput {
  amount: StringFilterInput
  and: [ComponentMetadataObchodnaVerejnaSutazFiltersInput]
  date_added: DateFilterInput
  description: StringFilterInput
  not: ComponentMetadataObchodnaVerejnaSutazFiltersInput
  number: StringFilterInput
  or: [ComponentMetadataObchodnaVerejnaSutazFiltersInput]
  subject: StringFilterInput
}

input ComponentMetadataObchodnaVerejnaSutazInput {
  amount: String
  attachment: ID
  date_added: Date
  description: String
  id: ID
  number: String
  subject: String
}

type ComponentMetadataObjednavky {
  attachment: UploadFileEntityResponse
  date_added: Date
  date_period: Date
  id: ID!
  title: String
}

input ComponentMetadataObjednavkyFiltersInput {
  and: [ComponentMetadataObjednavkyFiltersInput]
  date_added: DateFilterInput
  date_period: DateFilterInput
  not: ComponentMetadataObjednavkyFiltersInput
  or: [ComponentMetadataObjednavkyFiltersInput]
  title: StringFilterInput
}

input ComponentMetadataObjednavkyInput {
  attachment: ID
  date_added: Date
  date_period: Date
  id: ID
  title: String
}

type ComponentMetadataVerejneObstaravanie {
  amount: String
  attachment: UploadFileEntityResponse
  date_added: Date
  description: String
  id: ID!
  number: String
  subject: String
}

input ComponentMetadataVerejneObstaravanieFiltersInput {
  amount: StringFilterInput
  and: [ComponentMetadataVerejneObstaravanieFiltersInput]
  date_added: DateFilterInput
  description: StringFilterInput
  not: ComponentMetadataVerejneObstaravanieFiltersInput
  number: StringFilterInput
  or: [ComponentMetadataVerejneObstaravanieFiltersInput]
  subject: StringFilterInput
}

input ComponentMetadataVerejneObstaravanieInput {
  amount: String
  attachment: ID
  date_added: Date
  description: String
  id: ID
  number: String
  subject: String
}

type ComponentMetadataZmluvy {
  amount: String
  date: Date
  id: ID!
  number: String
  subject: String
  supplier: String
  type: String
}

input ComponentMetadataZmluvyFiltersInput {
  amount: StringFilterInput
  and: [ComponentMetadataZmluvyFiltersInput]
  date: DateFilterInput
  not: ComponentMetadataZmluvyFiltersInput
  number: StringFilterInput
  or: [ComponentMetadataZmluvyFiltersInput]
  subject: StringFilterInput
  supplier: StringFilterInput
  type: StringFilterInput
}

input ComponentMetadataZmluvyInput {
  amount: String
  date: Date
  id: ID
  number: String
  subject: String
  supplier: String
  type: String
}

type ComponentSectionsAccordion {
  flatText(filters: ComponentAccordionItemsFlatTextFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAccordionItemsFlatText]
  forms(filters: ComponentAccordionItemsFormFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAccordionItemsForm]
  id: ID!
  tableRows(filters: ComponentAccordionItemsTableRowFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAccordionItemsTableRow]
  title: String
}

input ComponentSectionsAccordionFiltersInput {
  and: [ComponentSectionsAccordionFiltersInput]
  flatText: ComponentAccordionItemsFlatTextFiltersInput
  forms: ComponentAccordionItemsFormFiltersInput
  not: ComponentSectionsAccordionFiltersInput
  or: [ComponentSectionsAccordionFiltersInput]
  tableRows: ComponentAccordionItemsTableRowFiltersInput
  title: StringFilterInput
}

input ComponentSectionsAccordionInput {
  flatText: [ComponentAccordionItemsFlatTextInput]
  forms: [ComponentAccordionItemsFormInput]
  id: ID
  tableRows: [ComponentAccordionItemsTableRowInput]
  title: String
}

type ComponentSectionsBlogPostsListing {
  id: ID!
}

input ComponentSectionsBlogPostsListingFiltersInput {
  and: [ComponentSectionsBlogPostsListingFiltersInput]
  not: ComponentSectionsBlogPostsListingFiltersInput
  or: [ComponentSectionsBlogPostsListingFiltersInput]
}

input ComponentSectionsBlogPostsListingInput {
  id: ID
}

type ComponentSectionsCherrypickSection {
  id: ID!
  pages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  title: String
}

input ComponentSectionsCherrypickSectionFiltersInput {
  and: [ComponentSectionsCherrypickSectionFiltersInput]
  not: ComponentSectionsCherrypickSectionFiltersInput
  or: [ComponentSectionsCherrypickSectionFiltersInput]
  pages: PageFiltersInput
  title: StringFilterInput
}

input ComponentSectionsCherrypickSectionInput {
  id: ID
  pages: [ID]
  title: String
}

type ComponentSectionsChildrenListing {
  depth: ENUM_COMPONENTSECTIONSCHILDRENLISTING_DEPTH!
  id: ID!
}

input ComponentSectionsChildrenListingFiltersInput {
  and: [ComponentSectionsChildrenListingFiltersInput]
  depth: StringFilterInput
  not: ComponentSectionsChildrenListingFiltersInput
  or: [ComponentSectionsChildrenListingFiltersInput]
}

input ComponentSectionsChildrenListingInput {
  depth: ENUM_COMPONENTSECTIONSCHILDRENLISTING_DEPTH
  id: ID
}

type ComponentSectionsCta {
  id: ID!
  title: String
  url: String
}

input ComponentSectionsCtaFiltersInput {
  and: [ComponentSectionsCtaFiltersInput]
  not: ComponentSectionsCtaFiltersInput
  or: [ComponentSectionsCtaFiltersInput]
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentSectionsCtaInput {
  id: ID
  title: String
  url: String
}

type ComponentSectionsDivider {
  id: ID!
}

input ComponentSectionsDividerFiltersInput {
  and: [ComponentSectionsDividerFiltersInput]
  not: ComponentSectionsDividerFiltersInput
  or: [ComponentSectionsDividerFiltersInput]
}

input ComponentSectionsDividerInput {
  id: ID
}

type ComponentSectionsDocuments {
  basicDocuments(filters: BasicDocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BasicDocumentRelationResponseCollection
  disclosures(filters: DisclosureFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DisclosureRelationResponseCollection
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  id: ID!
  title: String
}

input ComponentSectionsDocumentsFiltersInput {
  and: [ComponentSectionsDocumentsFiltersInput]
  basicDocuments: BasicDocumentFiltersInput
  disclosures: DisclosureFiltersInput
  documents: DocumentFiltersInput
  not: ComponentSectionsDocumentsFiltersInput
  or: [ComponentSectionsDocumentsFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsDocumentsInput {
  basicDocuments: [ID]
  disclosures: [ID]
  documents: [ID]
  id: ID
  title: String
}

type ComponentSectionsDocumentsListing {
  id: ID!
}

input ComponentSectionsDocumentsListingFiltersInput {
  and: [ComponentSectionsDocumentsListingFiltersInput]
  not: ComponentSectionsDocumentsListingFiltersInput
  or: [ComponentSectionsDocumentsListingFiltersInput]
}

input ComponentSectionsDocumentsListingInput {
  id: ID
}

type ComponentSectionsEventsListing {
  id: ID!
}

input ComponentSectionsEventsListingFiltersInput {
  and: [ComponentSectionsEventsListingFiltersInput]
  not: ComponentSectionsEventsListingFiltersInput
  or: [ComponentSectionsEventsListingFiltersInput]
}

input ComponentSectionsEventsListingInput {
  id: ID
}

type ComponentSectionsFaq {
  ctaButton: String
  id: ID!
  questions(filters: ComponentBlocksAccordionItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksAccordionItem]
  redirectTo: PageEntityResponse
  title: String
}

input ComponentSectionsFaqFiltersInput {
  and: [ComponentSectionsFaqFiltersInput]
  ctaButton: StringFilterInput
  not: ComponentSectionsFaqFiltersInput
  or: [ComponentSectionsFaqFiltersInput]
  questions: ComponentBlocksAccordionItemFiltersInput
  redirectTo: PageFiltersInput
  title: StringFilterInput
}

input ComponentSectionsFaqInput {
  ctaButton: String
  id: ID
  questions: [ComponentBlocksAccordionItemInput]
  redirectTo: ID
  title: String
}

type ComponentSectionsFlatText {
  content: String
  id: ID!
}

input ComponentSectionsFlatTextFiltersInput {
  and: [ComponentSectionsFlatTextFiltersInput]
  content: StringFilterInput
  not: ComponentSectionsFlatTextFiltersInput
  or: [ComponentSectionsFlatTextFiltersInput]
}

input ComponentSectionsFlatTextInput {
  content: String
  id: ID
}

type ComponentSectionsForm {
  id: ID!
  type: ENUM_COMPONENTSECTIONSFORM_TYPE
}

input ComponentSectionsFormFiltersInput {
  and: [ComponentSectionsFormFiltersInput]
  not: ComponentSectionsFormFiltersInput
  or: [ComponentSectionsFormFiltersInput]
  type: StringFilterInput
}

input ComponentSectionsFormInput {
  id: ID
  type: ENUM_COMPONENTSECTIONSFORM_TYPE
}

type ComponentSectionsGallery {
  Gallery(filters: ComponentLocalityPartsGalleryPartsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLocalityPartsGalleryParts]
  id: ID!
}

input ComponentSectionsGalleryFiltersInput {
  Gallery: ComponentLocalityPartsGalleryPartsFiltersInput
  and: [ComponentSectionsGalleryFiltersInput]
  not: ComponentSectionsGalleryFiltersInput
  or: [ComponentSectionsGalleryFiltersInput]
}

input ComponentSectionsGalleryInput {
  Gallery: [ComponentLocalityPartsGalleryPartsInput]
  id: ID
}

type ComponentSectionsMap {
  branches(filters: ComponentBlocksBranchItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksBranchItem]
  id: ID!
  title: String
}

input ComponentSectionsMapFiltersInput {
  and: [ComponentSectionsMapFiltersInput]
  branches: ComponentBlocksBranchItemFiltersInput
  not: ComponentSectionsMapFiltersInput
  or: [ComponentSectionsMapFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsMapInput {
  branches: [ComponentBlocksBranchItemInput]
  id: ID
  title: String
}

type ComponentSectionsNewBooksListing {
  id: ID!
}

input ComponentSectionsNewBooksListingFiltersInput {
  and: [ComponentSectionsNewBooksListingFiltersInput]
  not: ComponentSectionsNewBooksListingFiltersInput
  or: [ComponentSectionsNewBooksListingFiltersInput]
}

input ComponentSectionsNewBooksListingInput {
  id: ID
}

type ComponentSectionsNewsListing {
  id: ID!
}

input ComponentSectionsNewsListingFiltersInput {
  and: [ComponentSectionsNewsListingFiltersInput]
  not: ComponentSectionsNewsListingFiltersInput
  or: [ComponentSectionsNewsListingFiltersInput]
}

input ComponentSectionsNewsListingInput {
  id: ID
}

type ComponentSectionsOpeningHoursSection {
  branchList(filters: BranchFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BranchRelationResponseCollection
  id: ID!
  title: String
}

input ComponentSectionsOpeningHoursSectionFiltersInput {
  and: [ComponentSectionsOpeningHoursSectionFiltersInput]
  branchList: BranchFiltersInput
  not: ComponentSectionsOpeningHoursSectionFiltersInput
  or: [ComponentSectionsOpeningHoursSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsOpeningHoursSectionInput {
  branchList: [ID]
  id: ID
  title: String
}

type ComponentSectionsPartners {
  id: ID!
}

input ComponentSectionsPartnersFiltersInput {
  and: [ComponentSectionsPartnersFiltersInput]
  not: ComponentSectionsPartnersFiltersInput
  or: [ComponentSectionsPartnersFiltersInput]
}

input ComponentSectionsPartnersInput {
  id: ID
}

type ComponentSectionsRental {
  branches(filters: ComponentBlocksBranchItemWithPageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksBranchItemWithPage]
  id: ID!
  text: String
  title: String
}

input ComponentSectionsRentalFiltersInput {
  and: [ComponentSectionsRentalFiltersInput]
  branches: ComponentBlocksBranchItemWithPageFiltersInput
  not: ComponentSectionsRentalFiltersInput
  or: [ComponentSectionsRentalFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsRentalInput {
  branches: [ComponentBlocksBranchItemWithPageInput]
  id: ID
  text: String
  title: String
}

type ComponentSectionsSiteUsefullness {
  id: ID!
  thankYouMessage: String
  title: String
}

input ComponentSectionsSiteUsefullnessFiltersInput {
  and: [ComponentSectionsSiteUsefullnessFiltersInput]
  not: ComponentSectionsSiteUsefullnessFiltersInput
  or: [ComponentSectionsSiteUsefullnessFiltersInput]
  thankYouMessage: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsSiteUsefullnessInput {
  id: ID
  thankYouMessage: String
  title: String
}

type ComponentSectionsSubpages {
  id: ID!
  subpages(filters: ComponentBlocksSubpageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksSubpage]
  title: String
}

input ComponentSectionsSubpagesFiltersInput {
  and: [ComponentSectionsSubpagesFiltersInput]
  not: ComponentSectionsSubpagesFiltersInput
  or: [ComponentSectionsSubpagesFiltersInput]
  subpages: ComponentBlocksSubpageFiltersInput
  title: StringFilterInput
}

input ComponentSectionsSubpagesInput {
  id: ID
  subpages: [ComponentBlocksSubpageInput]
  title: String
}

type ComponentSectionsTable {
  id: ID!
  primaryTitle: String
  rows(filters: ComponentAccordionItemsTableRowFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAccordionItemsTableRow]
  secondaryTitle: String
}

input ComponentSectionsTableFiltersInput {
  and: [ComponentSectionsTableFiltersInput]
  not: ComponentSectionsTableFiltersInput
  or: [ComponentSectionsTableFiltersInput]
  primaryTitle: StringFilterInput
  rows: ComponentAccordionItemsTableRowFiltersInput
  secondaryTitle: StringFilterInput
}

input ComponentSectionsTableInput {
  id: ID
  primaryTitle: String
  rows: [ComponentAccordionItemsTableRowInput]
  secondaryTitle: String
}

type ComponentSectionsVideo {
  id: ID!
  media: UploadFileEntityResponse
  youtube_url: String
}

input ComponentSectionsVideoFiltersInput {
  and: [ComponentSectionsVideoFiltersInput]
  not: ComponentSectionsVideoFiltersInput
  or: [ComponentSectionsVideoFiltersInput]
  youtube_url: StringFilterInput
}

input ComponentSectionsVideoInput {
  id: ID
  media: ID
  youtube_url: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Disclosure {
  addedAt: DateTime!
  amount: Float
  contractor: String
  createdAt: DateTime
  dateFrom: Date
  dateTo: Date
  description: String
  file(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  grantProvider: String
  grantYear: String
  idNumber: String
  originalSlug: String
  originalTitle: String
  slug: String!
  title: String!
  type: ENUM_DISCLOSURE_TYPE!
  updatedAt: DateTime
}

type DisclosureEntity {
  attributes: Disclosure
  id: ID
}

type DisclosureEntityResponse {
  data: DisclosureEntity
}

type DisclosureEntityResponseCollection {
  data: [DisclosureEntity!]!
  meta: ResponseCollectionMeta!
}

input DisclosureFiltersInput {
  addedAt: DateTimeFilterInput
  amount: FloatFilterInput
  and: [DisclosureFiltersInput]
  contractor: StringFilterInput
  createdAt: DateTimeFilterInput
  dateFrom: DateFilterInput
  dateTo: DateFilterInput
  description: StringFilterInput
  grantProvider: StringFilterInput
  grantYear: StringFilterInput
  id: IDFilterInput
  idNumber: StringFilterInput
  not: DisclosureFiltersInput
  or: [DisclosureFiltersInput]
  originalSlug: StringFilterInput
  originalTitle: StringFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DisclosureInput {
  addedAt: DateTime
  amount: Float
  contractor: String
  dateFrom: Date
  dateTo: Date
  description: String
  file: [ID]
  grantProvider: String
  grantYear: String
  idNumber: String
  originalSlug: String
  originalTitle: String
  slug: String
  title: String
  type: ENUM_DISCLOSURE_TYPE
}

type DisclosureRelationResponseCollection {
  data: [DisclosureEntity!]!
}

type Document {
  createdAt: DateTime
  description: String
  documentCategory: DocumentCategoryEntityResponse
  file(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  originalSlug: String
  originalTitle: String
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type DocumentCategory {
  createdAt: DateTime
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  label: String!
  slug: String!
  updatedAt: DateTime
}

type DocumentCategoryEntity {
  attributes: DocumentCategory
  id: ID
}

type DocumentCategoryEntityResponse {
  data: DocumentCategoryEntity
}

type DocumentCategoryEntityResponseCollection {
  data: [DocumentCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentCategoryFiltersInput {
  and: [DocumentCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  documents: DocumentFiltersInput
  id: IDFilterInput
  label: StringFilterInput
  not: DocumentCategoryFiltersInput
  or: [DocumentCategoryFiltersInput]
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentCategoryInput {
  documents: [ID]
  label: String
  slug: String
}

type DocumentCategoryRelationResponseCollection {
  data: [DocumentCategoryEntity!]!
}

type DocumentEntity {
  attributes: Document
  id: ID
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  and: [DocumentFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentCategory: DocumentCategoryFiltersInput
  id: IDFilterInput
  not: DocumentFiltersInput
  or: [DocumentFiltersInput]
  originalSlug: StringFilterInput
  originalTitle: StringFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentInput {
  description: String
  documentCategory: ID
  file: [ID]
  originalSlug: String
  originalTitle: String
  publishedAt: DateTime
  slug: String
  title: String
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_BRANCH_BARRIERFREESTATE {
  ciastocne_pristupny
  nepristupny
  pristupny
}

enum ENUM_COMPONENTACCORDIONITEMSFORM_TYPE {
  aka_kniha_vam_v_kniznici_chyba
  ako_sa_prihlasit_do_kniznice
  bibliografia_a_resers
  cyklodonaska
  darcekova_poukazka
  detail_podujatia
  divadelna_technika
  hra_na_hudobne_nastroje
  kniharska_dielna
  medzikniznicna_vypozicna_sluzba_citatel
  medzikniznicna_vypozicna_sluzba_kniznica
  napiste_nam
  pracujte_v_priestoroch_kniznice
  pre_skoly
  prenajmite_si_priestor
  tablety
  tablety_a_citacky
}

enum ENUM_COMPONENTACCORDIONITEMSTABLEROW_VALUEALIGN {
  center
  start
}

enum ENUM_COMPONENTBLOCKSTABLEROW_VALUEALIGN {
  center
  start
}

enum ENUM_COMPONENTSECTIONSCHILDRENLISTING_DEPTH {
  depth_1
  depth_2
}

enum ENUM_COMPONENTSECTIONSFORM_TYPE {
  aka_kniha_vam_v_kniznici_chyba
  ako_sa_prihlasit_do_kniznice
  bibliografia_a_resers
  cyklodonaska
  darcekova_poukazka
  detail_podujatia
  divadelna_technika
  hra_na_hudobne_nastroje
  kniharska_dielna
  medzikniznicna_vypozicna_sluzba_citatel
  medzikniznicna_vypozicna_sluzba_kniznica
  napiste_nam
  pracujte_v_priestoroch_kniznice
  pre_skoly
  prenajmite_si_priestor
  tablety
  tablety_a_citacky
}

enum ENUM_DISCLOSURE_TYPE {
  Faktury
  Granty
  Obchodna_verejna_sutaz
  Objednavky
  Ostatne
  Verejne_obstaravanie
  Zmluvy
}

enum ENUM_PAGE_LAYOUT {
  content_with_sidebar
  full_content
  listing
  sublisting
}

type Error {
  code: String!
  message: String
}

type Event {
  branch: BranchEntityResponse
  coverImage: UploadFileEntityResponse
  createdAt: DateTime
  dateFrom: DateTime
  dateTo: DateTime
  description: String
  documents: ComponentSectionsDocuments
  eventCategory: EventCategoryEntityResponse
  eventTags(filters: EventTagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventTagRelationResponseCollection
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  guests(filters: ComponentGuestsGuestFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGuestsGuest]
  listingImage: UploadFileEntityResponse
  locale: String
  localizations(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventRelationResponseCollection
  price: Float
  promoted: Boolean
  publishedAt: DateTime
  seo: ComponentCommonSeo
  showForm: Boolean
  slug: String!
  title: String!
  updatedAt: DateTime
}

type EventCategory {
  createdAt: DateTime
  locale: String
  localizations(filters: EventCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventCategoryRelationResponseCollection
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type EventCategoryEntity {
  attributes: EventCategory
  id: ID
}

type EventCategoryEntityResponse {
  data: EventCategoryEntity
}

type EventCategoryEntityResponseCollection {
  data: [EventCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input EventCategoryFiltersInput {
  and: [EventCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: EventCategoryFiltersInput
  not: EventCategoryFiltersInput
  or: [EventCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input EventCategoryInput {
  publishedAt: DateTime
  title: String
}

type EventCategoryRelationResponseCollection {
  data: [EventCategoryEntity!]!
}

type EventEntity {
  attributes: Event
  id: ID
}

type EventEntityResponse {
  data: EventEntity
}

type EventEntityResponseCollection {
  data: [EventEntity!]!
  meta: ResponseCollectionMeta!
}

input EventFiltersInput {
  and: [EventFiltersInput]
  branch: BranchFiltersInput
  createdAt: DateTimeFilterInput
  dateFrom: DateTimeFilterInput
  dateTo: DateTimeFilterInput
  description: StringFilterInput
  documents: ComponentSectionsDocumentsFiltersInput
  eventCategory: EventCategoryFiltersInput
  eventTags: EventTagFiltersInput
  guests: ComponentGuestsGuestFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: EventFiltersInput
  not: EventFiltersInput
  or: [EventFiltersInput]
  price: FloatFilterInput
  promoted: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  seo: ComponentCommonSeoFiltersInput
  showForm: BooleanFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input EventInput {
  branch: ID
  coverImage: ID
  dateFrom: DateTime
  dateTo: DateTime
  description: String
  documents: ComponentSectionsDocumentsInput
  eventCategory: ID
  eventTags: [ID]
  gallery: [ID]
  guests: [ComponentGuestsGuestInput]
  listingImage: ID
  price: Float
  promoted: Boolean
  publishedAt: DateTime
  seo: ComponentCommonSeoInput
  showForm: Boolean
  slug: String
  title: String
}

type EventRelationResponseCollection {
  data: [EventEntity!]!
}

type EventTag {
  createdAt: DateTime
  locale: String
  localizations(filters: EventTagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventTagRelationResponseCollection
  publishedAt: DateTime
  slug: String
  title: String
  updatedAt: DateTime
}

type EventTagEntity {
  attributes: EventTag
  id: ID
}

type EventTagEntityResponse {
  data: EventTagEntity
}

type EventTagEntityResponseCollection {
  data: [EventTagEntity!]!
  meta: ResponseCollectionMeta!
}

input EventTagFiltersInput {
  and: [EventTagFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: EventTagFiltersInput
  not: EventTagFiltersInput
  or: [EventTagFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input EventTagInput {
  publishedAt: DateTime
  slug: String
  title: String
}

type EventTagRelationResponseCollection {
  data: [EventTagEntity!]!
}

type FileCategory {
  createdAt: DateTime
  name: String
  page: PageEntityResponse
  publishedAt: DateTime
  slug: String
  updatedAt: DateTime
}

type FileCategoryEntity {
  attributes: FileCategory
  id: ID
}

type FileCategoryEntityResponse {
  data: FileCategoryEntity
}

type FileCategoryEntityResponseCollection {
  data: [FileCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input FileCategoryFiltersInput {
  and: [FileCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: FileCategoryFiltersInput
  or: [FileCategoryFiltersInput]
  page: PageFiltersInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FileCategoryInput {
  name: String
  page: ID
  publishedAt: DateTime
  slug: String
}

type FileCategoryRelationResponseCollection {
  data: [FileCategoryEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type Footer {
  copyrightText: String
  createdAt: DateTime
  footerColumns(filters: ComponentFooterFooterColumnFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentFooterFooterColumn]
  locale: String
  localizations(publicationState: PublicationState = LIVE): FooterRelationResponseCollection
  privacyLink: PageEntityResponse
  publishedAt: DateTime
  siteMapLink: PageEntityResponse
  updatedAt: DateTime
}

type FooterEntity {
  attributes: Footer
  id: ID
}

type FooterEntityResponse {
  data: FooterEntity
}

type FooterEntityResponseCollection {
  data: [FooterEntity!]!
  meta: ResponseCollectionMeta!
}

input FooterFiltersInput {
  and: [FooterFiltersInput]
  copyrightText: StringFilterInput
  createdAt: DateTimeFilterInput
  footerColumns: ComponentFooterFooterColumnFiltersInput
  locale: StringFilterInput
  localizations: FooterFiltersInput
  not: FooterFiltersInput
  or: [FooterFiltersInput]
  privacyLink: PageFiltersInput
  publishedAt: DateTimeFilterInput
  siteMapLink: PageFiltersInput
  updatedAt: DateTimeFilterInput
}

input FooterInput {
  copyrightText: String
  footerColumns: [ComponentFooterFooterColumnInput]
  privacyLink: ID
  publishedAt: DateTime
  siteMapLink: ID
}

type FooterRelationResponseCollection {
  data: [FooterEntity!]!
}

type General {
  createdAt: DateTime
  eventsPage: PageEntityResponse
  locale: String
  localizations: GeneralRelationResponseCollection
  newBooksPage: PageEntityResponse
  noticesPage: PageEntityResponse
  openingHoursPage: PageEntityResponse
  privacyTermsAndConditionsPage: PageEntityResponse
  updatedAt: DateTime
}

type GeneralEntity {
  attributes: General
  id: ID
}

type GeneralEntityResponse {
  data: GeneralEntity
}

type GeneralEntityResponseCollection {
  data: [GeneralEntity!]!
  meta: ResponseCollectionMeta!
}

input GeneralFiltersInput {
  and: [GeneralFiltersInput]
  createdAt: DateTimeFilterInput
  eventsPage: PageFiltersInput
  locale: StringFilterInput
  localizations: GeneralFiltersInput
  newBooksPage: PageFiltersInput
  not: GeneralFiltersInput
  noticesPage: PageFiltersInput
  openingHoursPage: PageFiltersInput
  or: [GeneralFiltersInput]
  privacyTermsAndConditionsPage: PageFiltersInput
  updatedAt: DateTimeFilterInput
}

input GeneralInput {
  eventsPage: ID
  newBooksPage: ID
  noticesPage: ID
  openingHoursPage: ID
  privacyTermsAndConditionsPage: ID
}

type GeneralRelationResponseCollection {
  data: [GeneralEntity!]!
}

union GenericMorph = BasicDocument | BlogPost | BookTag | Branch | ComponentAccordionItemsFlatText | ComponentAccordionItemsForm | ComponentAccordionItemsTableRow | ComponentAddressAddress | ComponentBlocksAccordionItem | ComponentBlocksBranchItem | ComponentBlocksBranchItemWithPage | ComponentBlocksFileItem | ComponentBlocksNoticeFiles | ComponentBlocksOpeningHours | ComponentBlocksOpeningHoursItem | ComponentBlocksPageLink | ComponentBlocksSubpage | ComponentBlocksTableRow | ComponentCommonSeo | ComponentFooterFooterColumn | ComponentFooterFooterLink | ComponentGuestsGuest | ComponentHomepageBenefits | ComponentHomepageCta | ComponentHomepageFaqSection | ComponentHomepageFaqs | ComponentHomepageNewsSection | ComponentHomepagePromotedContent | ComponentHomepageRegistrationInfo | ComponentLocalityPartsGalleryParts | ComponentMenuSectionLinks | ComponentMenuSections | ComponentMenuSubsection | ComponentMenuSubsectionLinks | ComponentMetadataFaktury | ComponentMetadataMetadata | ComponentMetadataObchodnaVerejnaSutaz | ComponentMetadataObjednavky | ComponentMetadataVerejneObstaravanie | ComponentMetadataZmluvy | ComponentSectionsAccordion | ComponentSectionsBlogPostsListing | ComponentSectionsCherrypickSection | ComponentSectionsChildrenListing | ComponentSectionsCta | ComponentSectionsDivider | ComponentSectionsDocuments | ComponentSectionsDocumentsListing | ComponentSectionsEventsListing | ComponentSectionsFaq | ComponentSectionsFlatText | ComponentSectionsForm | ComponentSectionsGallery | ComponentSectionsMap | ComponentSectionsNewBooksListing | ComponentSectionsNewsListing | ComponentSectionsOpeningHoursSection | ComponentSectionsPartners | ComponentSectionsRental | ComponentSectionsSiteUsefullness | ComponentSectionsSubpages | ComponentSectionsTable | ComponentSectionsVideo | Disclosure | Document | DocumentCategory | Event | EventCategory | EventTag | FileCategory | Footer | General | HomePage | I18NLocale | Menu | NavikronosNavikronosStorage | Notice | Page | Partner | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type HomePage {
  createdAt: DateTime
  faqSection: ComponentHomepageFaqSection
  locale: String
  localizations: HomePageRelationResponseCollection
  mapSection: ComponentSectionsMap
  newsSection: ComponentHomepageNewsSection
  promotedContent: ComponentHomepagePromotedContent
  registrationInfoSection: ComponentHomepageRegistrationInfo
  seo: ComponentCommonSeo
  updatedAt: DateTime
}

type HomePageEntity {
  attributes: HomePage
  id: ID
}

type HomePageEntityResponse {
  data: HomePageEntity
}

type HomePageEntityResponseCollection {
  data: [HomePageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomePageFiltersInput {
  and: [HomePageFiltersInput]
  createdAt: DateTimeFilterInput
  faqSection: ComponentHomepageFaqSectionFiltersInput
  locale: StringFilterInput
  localizations: HomePageFiltersInput
  mapSection: ComponentSectionsMapFiltersInput
  newsSection: ComponentHomepageNewsSectionFiltersInput
  not: HomePageFiltersInput
  or: [HomePageFiltersInput]
  promotedContent: ComponentHomepagePromotedContentFiltersInput
  registrationInfoSection: ComponentHomepageRegistrationInfoFiltersInput
  seo: ComponentCommonSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomePageInput {
  faqSection: ComponentHomepageFaqSectionInput
  mapSection: ComponentSectionsMapInput
  newsSection: ComponentHomepageNewsSectionInput
  promotedContent: ComponentHomepagePromotedContentInput
  registrationInfoSection: ComponentHomepageRegistrationInfoInput
  seo: ComponentCommonSeoInput
}

type HomePageRelationResponseCollection {
  data: [HomePageEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Menu {
  createdAt: DateTime
  locale: String
  localizations(filters: MenuFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MenuRelationResponseCollection
  menuSections(filters: ComponentMenuSectionsFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuSections]
  menuSlug: String
  menuTitle: String
  menuTotalColumns: Int
  order: Int
  publishedAt: DateTime
  updatedAt: DateTime
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  and: [MenuFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: MenuFiltersInput
  menuSections: ComponentMenuSectionsFiltersInput
  menuSlug: StringFilterInput
  menuTitle: StringFilterInput
  menuTotalColumns: IntFilterInput
  not: MenuFiltersInput
  or: [MenuFiltersInput]
  order: IntFilterInput
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input MenuInput {
  menuSections: [ComponentMenuSectionsInput]
  menuSlug: String
  menuTitle: String
  menuTotalColumns: Int
  order: Int
  publishedAt: DateTime
}

type MenuRelationResponseCollection {
  data: [MenuEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createBasicDocument(data: BasicDocumentInput!): BasicDocumentEntityResponse
  createBlogPost(data: BlogPostInput!, locale: I18NLocaleCode): BlogPostEntityResponse
  createBlogPostLocalization(data: BlogPostInput, id: ID, locale: I18NLocaleCode): BlogPostEntityResponse
  createBookTag(data: BookTagInput!): BookTagEntityResponse
  createBranch(data: BranchInput!, locale: I18NLocaleCode): BranchEntityResponse
  createBranchLocalization(data: BranchInput, id: ID, locale: I18NLocaleCode): BranchEntityResponse
  createDisclosure(data: DisclosureInput!): DisclosureEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  createDocumentCategory(data: DocumentCategoryInput!): DocumentCategoryEntityResponse
  createEvent(data: EventInput!, locale: I18NLocaleCode): EventEntityResponse
  createEventCategory(data: EventCategoryInput!, locale: I18NLocaleCode): EventCategoryEntityResponse
  createEventCategoryLocalization(data: EventCategoryInput, id: ID, locale: I18NLocaleCode): EventCategoryEntityResponse
  createEventLocalization(data: EventInput, id: ID, locale: I18NLocaleCode): EventEntityResponse
  createEventTag(data: EventTagInput!, locale: I18NLocaleCode): EventTagEntityResponse
  createEventTagLocalization(data: EventTagInput, id: ID, locale: I18NLocaleCode): EventTagEntityResponse
  createFileCategory(data: FileCategoryInput!): FileCategoryEntityResponse
  createFooterLocalization(data: FooterInput, id: ID, locale: I18NLocaleCode): FooterEntityResponse
  createGeneralLocalization(data: GeneralInput, id: ID, locale: I18NLocaleCode): GeneralEntityResponse
  createHomePageLocalization(data: HomePageInput, id: ID, locale: I18NLocaleCode): HomePageEntityResponse
  createMenu(data: MenuInput!, locale: I18NLocaleCode): MenuEntityResponse
  createMenuLocalization(data: MenuInput, id: ID, locale: I18NLocaleCode): MenuEntityResponse
  createNotice(data: NoticeInput!, locale: I18NLocaleCode): NoticeEntityResponse
  createNoticeLocalization(data: NoticeInput, id: ID, locale: I18NLocaleCode): NoticeEntityResponse
  createPage(data: PageInput!, locale: I18NLocaleCode): PageEntityResponse
  createPageLocalization(data: PageInput, id: ID, locale: I18NLocaleCode): PageEntityResponse
  createPartner(data: PartnerInput!, locale: I18NLocaleCode): PartnerEntityResponse
  createPartnerLocalization(data: PartnerInput, id: ID, locale: I18NLocaleCode): PartnerEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteBasicDocument(id: ID!): BasicDocumentEntityResponse
  deleteBlogPost(id: ID!, locale: I18NLocaleCode): BlogPostEntityResponse
  deleteBookTag(id: ID!): BookTagEntityResponse
  deleteBranch(id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  deleteDisclosure(id: ID!): DisclosureEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  deleteDocumentCategory(id: ID!): DocumentCategoryEntityResponse
  deleteEvent(id: ID!, locale: I18NLocaleCode): EventEntityResponse
  deleteEventCategory(id: ID!, locale: I18NLocaleCode): EventCategoryEntityResponse
  deleteEventTag(id: ID!, locale: I18NLocaleCode): EventTagEntityResponse
  deleteFileCategory(id: ID!): FileCategoryEntityResponse
  deleteFooter(locale: I18NLocaleCode): FooterEntityResponse
  deleteGeneral(locale: I18NLocaleCode): GeneralEntityResponse
  deleteHomePage(locale: I18NLocaleCode): HomePageEntityResponse
  deleteMenu(id: ID!, locale: I18NLocaleCode): MenuEntityResponse
  deleteNavikronosNavikronosStorage: NavikronosNavikronosStorageEntityResponse
  deleteNotice(id: ID!, locale: I18NLocaleCode): NoticeEntityResponse
  deletePage(id: ID!, locale: I18NLocaleCode): PageEntityResponse
  deletePartner(id: ID!, locale: I18NLocaleCode): PartnerEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateBasicDocument(data: BasicDocumentInput!, id: ID!): BasicDocumentEntityResponse
  updateBlogPost(data: BlogPostInput!, id: ID!, locale: I18NLocaleCode): BlogPostEntityResponse
  updateBookTag(data: BookTagInput!, id: ID!): BookTagEntityResponse
  updateBranch(data: BranchInput!, id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  updateDisclosure(data: DisclosureInput!, id: ID!): DisclosureEntityResponse
  updateDocument(data: DocumentInput!, id: ID!): DocumentEntityResponse
  updateDocumentCategory(data: DocumentCategoryInput!, id: ID!): DocumentCategoryEntityResponse
  updateEvent(data: EventInput!, id: ID!, locale: I18NLocaleCode): EventEntityResponse
  updateEventCategory(data: EventCategoryInput!, id: ID!, locale: I18NLocaleCode): EventCategoryEntityResponse
  updateEventTag(data: EventTagInput!, id: ID!, locale: I18NLocaleCode): EventTagEntityResponse
  updateFileCategory(data: FileCategoryInput!, id: ID!): FileCategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateFooter(data: FooterInput!, locale: I18NLocaleCode): FooterEntityResponse
  updateGeneral(data: GeneralInput!, locale: I18NLocaleCode): GeneralEntityResponse
  updateHomePage(data: HomePageInput!, locale: I18NLocaleCode): HomePageEntityResponse
  updateMenu(data: MenuInput!, id: ID!, locale: I18NLocaleCode): MenuEntityResponse
  updateNavikronosNavikronosStorage(data: NavikronosNavikronosStorageInput!): NavikronosNavikronosStorageEntityResponse
  updateNotice(data: NoticeInput!, id: ID!, locale: I18NLocaleCode): NoticeEntityResponse
  updatePage(data: PageInput!, id: ID!, locale: I18NLocaleCode): PageEntityResponse
  updatePartner(data: PartnerInput!, id: ID!, locale: I18NLocaleCode): PartnerEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type NavikronosNavikronosStorage {
  createdAt: DateTime
  data: JSON
  updatedAt: DateTime
}

type NavikronosNavikronosStorageEntity {
  attributes: NavikronosNavikronosStorage
  id: ID
}

type NavikronosNavikronosStorageEntityResponse {
  data: NavikronosNavikronosStorageEntity
}

type NavikronosNavikronosStorageEntityResponseCollection {
  data: [NavikronosNavikronosStorageEntity!]!
  meta: ResponseCollectionMeta!
}

input NavikronosNavikronosStorageFiltersInput {
  and: [NavikronosNavikronosStorageFiltersInput]
  createdAt: DateTimeFilterInput
  data: JSONFilterInput
  not: NavikronosNavikronosStorageFiltersInput
  or: [NavikronosNavikronosStorageFiltersInput]
  updatedAt: DateTimeFilterInput
}

input NavikronosNavikronosStorageInput {
  data: JSON
}

type NavikronosNavikronosStorageRelationResponseCollection {
  data: [NavikronosNavikronosStorageEntity!]!
}

type Notice {
  body: String
  createdAt: DateTime
  dateAdded: Date
  documents: ComponentSectionsDocuments
  isCurrentChangeInOpeningHours: Boolean
  listingImage: UploadFileEntityResponse
  locale: String
  localizations(filters: NoticeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NoticeRelationResponseCollection
  promoted: Boolean
  publishedAt: DateTime
  seo: ComponentCommonSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type NoticeEntity {
  attributes: Notice
  id: ID
}

type NoticeEntityResponse {
  data: NoticeEntity
}

type NoticeEntityResponseCollection {
  data: [NoticeEntity!]!
  meta: ResponseCollectionMeta!
}

input NoticeFiltersInput {
  and: [NoticeFiltersInput]
  body: StringFilterInput
  createdAt: DateTimeFilterInput
  dateAdded: DateFilterInput
  documents: ComponentSectionsDocumentsFiltersInput
  id: IDFilterInput
  isCurrentChangeInOpeningHours: BooleanFilterInput
  locale: StringFilterInput
  localizations: NoticeFiltersInput
  not: NoticeFiltersInput
  or: [NoticeFiltersInput]
  promoted: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  seo: ComponentCommonSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input NoticeInput {
  body: String
  dateAdded: Date
  documents: ComponentSectionsDocumentsInput
  isCurrentChangeInOpeningHours: Boolean
  listingImage: ID
  promoted: Boolean
  publishedAt: DateTime
  seo: ComponentCommonSeoInput
  slug: String
  title: String
}

type NoticeRelationResponseCollection {
  data: [NoticeEntity!]!
}

type Page {
  branchesServicesTo(filters: BranchFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BranchRelationResponseCollection
  createdAt: DateTime
  layout: ENUM_PAGE_LAYOUT
  listingImage: UploadFileEntityResponse
  locale: String
  localizations(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  newSlug: String!
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZone]
  seo: ComponentCommonSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  and: [PageFiltersInput]
  branchesServicesTo: BranchFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  layout: StringFilterInput
  locale: StringFilterInput
  localizations: PageFiltersInput
  newSlug: StringFilterInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  perex: StringFilterInput
  publishedAt: DateTimeFilterInput
  seo: ComponentCommonSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  branchesServicesTo: [ID]
  layout: ENUM_PAGE_LAYOUT
  listingImage: ID
  newSlug: String
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZoneInput!]
  seo: ComponentCommonSeoInput
  slug: String
  title: String
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

union PageSectionsDynamicZone = ComponentSectionsAccordion | ComponentSectionsBlogPostsListing | ComponentSectionsCherrypickSection | ComponentSectionsChildrenListing | ComponentSectionsCta | ComponentSectionsDivider | ComponentSectionsDocuments | ComponentSectionsDocumentsListing | ComponentSectionsEventsListing | ComponentSectionsFaq | ComponentSectionsFlatText | ComponentSectionsForm | ComponentSectionsGallery | ComponentSectionsMap | ComponentSectionsNewBooksListing | ComponentSectionsNewsListing | ComponentSectionsOpeningHoursSection | ComponentSectionsPartners | ComponentSectionsRental | ComponentSectionsSiteUsefullness | ComponentSectionsSubpages | ComponentSectionsTable | ComponentSectionsVideo | Error

scalar PageSectionsDynamicZoneInput

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Partner {
  createdAt: DateTime
  featured: Boolean
  locale: String
  localizations(filters: PartnerFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PartnerRelationResponseCollection
  logo: UploadFileEntityResponse
  priority: Float
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
  url: String
}

type PartnerEntity {
  attributes: Partner
  id: ID
}

type PartnerEntityResponse {
  data: PartnerEntity
}

type PartnerEntityResponseCollection {
  data: [PartnerEntity!]!
  meta: ResponseCollectionMeta!
}

input PartnerFiltersInput {
  and: [PartnerFiltersInput]
  createdAt: DateTimeFilterInput
  featured: BooleanFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: PartnerFiltersInput
  not: PartnerFiltersInput
  or: [PartnerFiltersInput]
  priority: FloatFilterInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input PartnerInput {
  featured: Boolean
  logo: ID
  priority: Float
  publishedAt: DateTime
  title: String
  url: String
}

type PartnerRelationResponseCollection {
  data: [PartnerEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  basicDocument(id: ID): BasicDocumentEntityResponse
  basicDocuments(filters: BasicDocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BasicDocumentEntityResponseCollection
  blogPost(id: ID, locale: I18NLocaleCode): BlogPostEntityResponse
  blogPosts(filters: BlogPostFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogPostEntityResponseCollection
  bookTag(id: ID): BookTagEntityResponse
  bookTags(filters: BookTagFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BookTagEntityResponseCollection
  branch(id: ID, locale: I18NLocaleCode): BranchEntityResponse
  branches(filters: BranchFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): BranchEntityResponseCollection
  disclosure(id: ID): DisclosureEntityResponse
  disclosures(filters: DisclosureFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DisclosureEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documentCategories(filters: DocumentCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DocumentCategoryEntityResponseCollection
  documentCategory(id: ID): DocumentCategoryEntityResponse
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentEntityResponseCollection
  event(id: ID, locale: I18NLocaleCode): EventEntityResponse
  eventCategories(filters: EventCategoryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventCategoryEntityResponseCollection
  eventCategory(id: ID, locale: I18NLocaleCode): EventCategoryEntityResponse
  eventTag(id: ID, locale: I18NLocaleCode): EventTagEntityResponse
  eventTags(filters: EventTagFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventTagEntityResponseCollection
  events(filters: EventFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventEntityResponseCollection
  fileCategories(filters: FileCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FileCategoryEntityResponseCollection
  fileCategory(id: ID): FileCategoryEntityResponse
  footer(locale: I18NLocaleCode, publicationState: PublicationState = LIVE): FooterEntityResponse
  general(locale: I18NLocaleCode): GeneralEntityResponse
  homePage(locale: I18NLocaleCode): HomePageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  menu(id: ID, locale: I18NLocaleCode): MenuEntityResponse
  menus(filters: MenuFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MenuEntityResponseCollection
  navikronosNavikronosStorage: NavikronosNavikronosStorageEntityResponse
  notice(id: ID, locale: I18NLocaleCode): NoticeEntityResponse
  notices(filters: NoticeFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NoticeEntityResponseCollection
  page(id: ID, locale: I18NLocaleCode): PageEntityResponse
  pages(filters: PageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  partner(id: ID, locale: I18NLocaleCode): PartnerEntityResponse
  partners(filters: PartnerFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PartnerEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
